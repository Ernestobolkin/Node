                  1.crud:


1.1 â€“ Write a MongoDb query to display all the documents in the restaurant collection:
      Restaurant.find();          -mongoose
      db.restaurants.find()       -mongosh

1.2 - Write a MongoDb query to display all restaurants that have a specific cuisine:
      Restaurant.find({cuisineType:"test"})
      db.restaurants.find({cuisineType:"test"})

1.3 - Write a MongoDb query that displays only kosher restaurants:
      Restaurant.find({isKosher:true})
      db.restaurants.find({isKosher:true})
      
1.3 - Write a MongoDb query that displays only a specific cities restaurants:
      Restaurant.find({ "address.city": "Dimona" })
      db.restaurants.find({ "address.city": "Dimona" })

1.5 - Write a MongoDb query to display a specific restaurants address:
      Restaurant.find({ "address.street": "Jordan" })
      db.restaurants.find({ "address.street": "Jordan" })

1.6 - Write a MongoDb query to display a specific restaurants coordinates:
      Restaurant.find({ coordinates: [ -77, 564, 40.67 ] })
      db.restaurants.find({ coordinates: [ -77, 564, 40.67 ] })

1.7 - Write a MongoDb query that should display all restaurants in ascending order by restaurant name:
      Restaurant.find().sort({ name: 1 })
      db.restaurants.find().sort({ name: 1 })

1.8 - Write a MongoDb query that should display all restaurants in ascending order by city names:
      Restaurant.find().sort({ "address.city": 1 })
      db.restaurants.find().sort({ "address.city": 1 })

1.9 - Update a specific restaurant's name:
      Restaurant.updateOne({ name: "hello asdasd world" },{ $set: { name: "mac" } });
      db.restaurants.updateOne({ name: "za" },{ $set: { name: "ze" } })

1.10 - Update a specific restaurant by adding a new review:
      Restaurant.updateOne({name:"Ernest's Restaurant"},{$push:{reviews:["test 8, 1010 02:24:00","10"]}})
      db.restaurants.updateOne({name:"Ernest's Restaurant"},{$push:{reviews:["test 8, 1010 02:24:00","100"]}})

1.11 - Update all restaurants to be kosher:
      Restaurant.updateMany({}, { $set: { isKosher: true } });
      db.restaurants.updateMany({}, { $set: { isKosher: true } });

1.12 - Delete a specific restaurant:
      Restaurant.deleteOne({name:"ze"});
      db.restaurants.deleteOne({name:"ze"});

1.13 - Delete all restaurants:
      Restaurant.deleteOne({});
      db.restaurants.deleteOne({})

                2. forEach Queries:


2.1 - Write a MongoDb query to print all restaurant names:
      (await Restaurant.find()).forEach((restaurant)=>{console.log('name: '+restaurant.name)})
      db.restaurants.find().forEach((res)=>{print(res.name)})


2.2 - Write a MongoDb query to print all restaurant cities:
      (await Restaurant.find()).forEach((restaurant)=>{console.log('city: '+restaurant.address.city)})
      db.restaurants.find().forEach((res)=>{print(res.address.city)})

2.3 - Write a MongoDb query to print all restaurant coordinates:
      (await Restaurant.find()).forEach((restaurant)=>{console.log("coordinates: " + restaurant.address.coordinates)})
      db.restaurants.find().forEach((res)=>{print(restaurant.address.coordinates)})


                3. Advanced Queries:


3.1 - Query for restaurant names that start with a specific alphabet:
      Restaurant.find({ name: /^z/gi });
      db.restaurants.find({ name: /^z/gi });

3.2 - Query how many documents you have from the restaurant collection:


3.3 - Write a MongoDb query to get restaurants that include reviews from a specific date: